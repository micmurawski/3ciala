#!/usr/bin/python
from visual import *
from visual.graph import *
import math

def symulacja(x=5,y=20,G=4,dt=0.0001,m1=6,v1=vector(1,-sqrt(3),0),pos1=vector(-2.5001, 0.00001, 0.00001),m2=6,v2=vector(-2,0, 0),pos2=vector(1, (sqrt(3), 0.00001), m3=6,v3 = vector(1, (sqrt(3)), 0), pos3 =vector(2.4999, 0.00001, 0.00001)):

  scene.width = 700
  scene.height = 600
  scene.title = 'Zagadnienie trzech cial'
  scene.autoscale= False
  scene.fullscreen = False

  #WARUNKI POCZATKOWE 
  t=0
  c=0
  e1 = 0.1 
  e2 = 0.1 
  e3 = 0.1
  r1 = e1 
  r2 = e2
  r3 = e3
  v0=vector(0,0,0)
  v1*=1.4
  v2*=1.4
  v3*=1.4
#OSIE
  x1 = arange(-500, 500, 1)
  curve(x = x1)
  curve(y=x1)
  curve(z=x1)

#WYSWIETLANIE SFER
  P1 = sphere(pos = pos1, radius = r1, color = color.red)
  P2 = sphere(pos = pos2, radius = r2, color = color.green)
  P3 = sphere(pos = pos3, radius = r3, color = color.blue)

#SLAD CIAL
  P1.trail = curve(color = P1.color)
  P2.trail = curve(color = P2.color)
  P3.trail = curve(color = P3.color)

#FUNKCJA SILY
  def sila(x, x_m, m):
      r = x-x_m
      r_mag = mag(r)
      r_norm = norm(r)
      a = (-G*m/(r_mag**2)) * r_norm
      return a
      
  pos_graph = gdisplay(x=700, y=500, width=500, height=500, 
		title='Diagram fazowy p(x)', xtitle='x', ytitle='v', 
		xmax=x, xmin=0., ymax=y, ymin=0, 
		foreground=color.white, background=color.black)
  pos1_Plot = gdots(color=color.red, size=1)
  pos2_Plot = gdots(color=color.blue, size=1)
  pos3_Plot = gdots(color=color.green, size=1)
  

    
    
  while True:
      rate(1000000000)
      #P1
      a1 = sila(P1.pos, P2.pos, m2) + sila(P1.pos, P3.pos, m3)
      dv1 = a1*dt
      v1 = v1 + dv1
      x1 = v1*dt
      #P2
      a2 = sila(P2.pos, P1.pos, m1) + sila(P2.pos, P3.pos, m3)
      dv2 = a2*dt
      v2 = v2 + dv2
      x2 = v2*dt
      #P3
      a3 = sila(P3.pos, P2.pos, m2) + sila(P3.pos, P1.pos, m1)
      dv3 = a3*dt
      v3 = v3 + dv3
      x3 = v3*dt
      t+=dt
      c+=1
      P1.pos = P1.pos + x1
      P1.trail.append(pos=P1.pos)
      P2.pos = P2.pos + x2
      P2.trail.append(pos=P2.pos)
      P3.pos = P3.pos + x3
      P3.trail.append(pos=P3.pos)
      scene.center = vector((m1*P1.pos[0]+m2*P2.pos[0]+m3*P3.pos[0])/(m1+m2+m3),(m1*P1.pos[1]+m2*P2.pos[1]+m3*P3.pos[1])/(m1+m2+m3),(m1*P1.pos[2]+m2*P2.pos[2]+m3*P3.pos[2])/(m1+m2+m3))
      if (c%10==0):
	pos1_Plot.plot(pos=(mag(v1),mag(P1.pos)))
	pos2_Plot.plot(pos=(mag(v2),mag(P2.pos)))
	pos3_Plot.plot(pos=(mag(v3),mag(P3.pos)))
      #if (l==1):
	#vl=v1
      #elif(l==2):
	#vl=v2
      #elif(l==3):
	#vl=v3
    
  #  if  mag(P1.pos-P2.pos)<(r1+r2) or mag(P1.pos-P3.pos)<(r1+r3) or (mag(P3.pos-P2.pos)<(r











